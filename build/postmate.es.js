/**
  postmate - A powerful, simple, promise-based postMessage library
  @version v1.3.0
  @link https://github.com/dollarshaveclub/postmate
  @author Jacob Kelley <jakie8@gmail.com>
  @license MIT
**/
var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var messsageType="application/x-postmate-v1+json",hasOwnProperty=Object.prototype.hasOwnProperty,maxHandshakeRequests=5,_messageId=0,messageId=function(){return++_messageId},log=function(){var e;return Postmate.debug?(e=console).log.apply(e,arguments):null},resolveOrigin=function(e){var t=document.createElement("a");return t.href=e,t.origin||t.protocol+"//"+t.hostname},sanitize=function(e,t){return e.origin===t&&("object"===_typeof(e.data)&&("postmate"in e.data&&(e.data.type===messsageType&&!!{"handshake-reply":1,call:1,emit:1,reply:1,request:1}[e.data.postmate])))},resolveValue=function(e,t){var n="function"==typeof e[t]?e[t]():e[t];return Postmate.Promise.resolve(n)},ParentAPI=function(){function e(t){var n=this;_classCallCheck(this,e),this.parent=t.parent,this.frame=t.frame,this.child=t.child,this.childOrigin=t.childOrigin,this.events={},log("Parent: Registering API"),log("Parent: Awaiting messages..."),this.listener=function(e){var t=((e||{}).data||{}).value||{},a=t.data,i=t.name;"emit"===e.data.postmate&&(log("Parent: Received event emission: "+i),i in n.events&&n.events[i].call(n,a))},this.parent.addEventListener("message",this.listener,!1),log("Parent: Awaiting event emissions from Child")}return _createClass(e,[{key:"get",value:function(e){var t=this;return new Postmate.Promise(function(n){var a=messageId();t.parent.addEventListener("message",function e(i){i.data.uid===a&&"reply"===i.data.postmate&&(t.parent.removeEventListener("message",e,!1),n(i.data.value))},!1),t.child.postMessage({postmate:"request",type:messsageType,property:e,uid:a},t.childOrigin)})}},{key:"call",value:function(e,t){this.child.postMessage({postmate:"call",type:messsageType,property:e,data:t},this.childOrigin)}},{key:"on",value:function(e,t){this.events[e]=t}},{key:"destroy",value:function(){log("Parent: Destroying Postmate instance"),window.removeEventListener("message",this.listener,!1),this.frame.parentNode.removeChild(this.frame)}}]),e}(),ChildAPI=function(){function e(t){var n=this;_classCallCheck(this,e),this.model=t.model,this.parent=t.parent,this.parentOrigin=t.parentOrigin,this.child=t.child,log("Child: Registering API"),log("Child: Awaiting messages..."),this.child.addEventListener("message",function(e){if(sanitize(e,n.parentOrigin)){log("Child: Received request",e.data);var t=e.data,a=t.property,i=t.uid,s=t.data;"call"!==e.data.postmate?resolveValue(n.model,a).then(function(t){return e.source.postMessage({property:a,postmate:"reply",type:messsageType,uid:i,value:t},e.origin)}):a in n.model&&"function"==typeof n.model[a]&&n.model[a].call(n,s)}})}return _createClass(e,[{key:"emit",value:function(e,t){log('Child: Emitting Event "'+e+'"',t),this.parent.postMessage({postmate:"emit",type:messsageType,value:{name:e,data:t}},this.parentOrigin)}}]),e}(),Postmate=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:userOptions,n=t.container,a=void 0===n?void 0!==a?a:document.body:n,i=t.model,s=t.url;return _classCallCheck(this,e),this.parent=window,this.frame=document.createElement("iframe"),a.appendChild(this.frame),this.child=this.frame.contentWindow||this.frame.contentDocument.parentWindow,this.model=i||{},this.sendHandshake(s)}return _createClass(e,[{key:"sendHandshake",value:function(t){var n=this,a=resolveOrigin(t),i=0,s=void 0;return new e.Promise(function(e,r){n.parent.addEventListener("message",function t(i){return!!sanitize(i,a)&&("handshake-reply"===i.data.postmate?(clearInterval(s),log("Parent: Received handshake reply from Child"),n.parent.removeEventListener("message",t,!1),n.childOrigin=i.origin,log("Parent: Saving Child origin",n.childOrigin),e(new ParentAPI(n))):(log("Parent: Invalid handshake reply"),r("Failed handshake")))},!1);var o=function(){log("Parent: Sending handshake attempt "+ ++i,{childOrigin:a}),n.child.postMessage({postmate:"handshake",type:messsageType,model:n.model},a),i===maxHandshakeRequests&&clearInterval(s)},l=function(){o(),s=setInterval(o,500)};n.frame.attachEvent?n.frame.attachEvent("onload",l):n.frame.onload=l,log("Parent: Loading frame",{url:t}),n.frame.src=t})}}]),e}();Postmate.debug=!1,Postmate.Promise=function(){try{return window?window.Promise:Promise}catch(e){return null}}(),Postmate.Model=function(){function e(t){return _classCallCheck(this,e),this.child=window,this.model=t,this.parent=this.child.parent,this.sendHandshakeReply()}return _createClass(e,[{key:"sendHandshakeReply",value:function(){var e=this;return new Postmate.Promise(function(t,n){e.child.addEventListener("message",function a(i){if(i.data.postmate){if("handshake"===i.data.postmate){log("Child: Received handshake from Parent"),e.child.removeEventListener("message",a,!1),log("Child: Sending handshake reply to Parent"),i.source.postMessage({postmate:"handshake-reply",type:messsageType},i.origin),e.parentOrigin=i.origin;var s=i.data.model;if(s){for(var r=Object.keys(s),o=0;o<r.length;o++)hasOwnProperty.call(s,r[o])&&(e.model[r[o]]=s[r[o]]);log("Child: Inherited and extended model from Parent")}return log("Child: Saving Parent origin",e.parentOrigin),t(new ChildAPI(e))}return n("Handshake Reply Failed")}},!1)})}}]),e}();export default Postmate;
