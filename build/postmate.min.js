/**
  postmate - A powerful, simple, promise-based postMessage library
  @version v1.6.0
  @link https://github.com/dollarshaveclub/postmate
  @author Jacob Kelley <jakie8@gmail.com>
  @license MIT
**/
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).Postmate=t()}(this,function(){"use strict";function h(){var e;return m.debug?(e=console).log.apply(e,arguments):null}function l(e,t){return("string"!=typeof t||e.origin===t)&&(!!e.data&&(("object"!=typeof e.data||"postmate"in e.data)&&(e.data.type===c&&!!n[e.data.postmate])))}var c="application/x-postmate-v1+json",r=0,n={handshake:1,"handshake-reply":1,call:1,emit:1,reply:1,request:1},p=function(){function e(e){var a=this;this.parent=e.parent,this.frame=e.frame,this.child=e.child,this.childOrigin=e.childOrigin,this.events={},h("Parent: Registering API"),h("Parent: Awaiting messages..."),this.listener=function(e){if(!l(e,a.childOrigin))return!1;var t=((e||{}).data||{}).value||{},n=t.data,i=t.name;"emit"===e.data.postmate&&(h("Parent: Received event emission: "+i),i in a.events&&a.events[i].forEach(function(e){e.call(a,n)}))},this.parent.addEventListener("message",this.listener,!1),h("Parent: Awaiting event emissions from Child")}var t=e.prototype;return t.get=function(e){var a=this;return new m.Promise(function(n){var i=++r;a.parent.addEventListener("message",function e(t){t.data.uid===i&&"reply"===t.data.postmate&&(a.parent.removeEventListener("message",e,!1),n(t.data.value))},!1),a.child.postMessage({postmate:"request",type:c,property:e,uid:i},a.childOrigin)})},t.call=function(e,t){this.child.postMessage({postmate:"call",type:c,property:e,data:t},this.childOrigin)},t.on=function(e,t){this.events[e]||(this.events[e]=[]),this.events[e].push(t)},t.destroy=function(){h("Parent: Destroying Postmate instance"),window.removeEventListener("message",this.listener,!1),this.frame.parentNode.removeChild(this.frame)},e}(),s=function(){function e(e){var d=this;this.model=e.model,this.parent=e.parent,this.parentOrigin=e.parentOrigin,this.child=e.child,h("Child: Registering API"),h("Child: Awaiting messages..."),this.child.addEventListener("message",function(t){var e,n,i,a,r,s,o;l(t,d.parentOrigin)&&(h("Child: Received request",t.data),e=t.data,n=e.property,i=e.uid,a=e.data,"call"!==t.data.postmate?(r=d.model,o="function"==typeof r[s=n]?r[s]():r[s],m.Promise.resolve(o).then(function(e){return t.source.postMessage({property:n,postmate:"reply",type:c,uid:i,value:e},t.origin)})):n in d.model&&"function"==typeof d.model[n]&&d.model[n](a))})}return e.prototype.emit=function(e,t){h('Child: Emitting Event "'+e+'"',t),this.parent.postMessage({postmate:"emit",type:c,value:{name:e,data:t}},this.parentOrigin)},e}(),m=function(){function e(e){var t=e.container,n=void 0===t?void 0!==n?n:document.body:t,i=e.model,a=e.url,r=e.name,s=e.classListArray,o=void 0===s?[]:s;return this.parent=window,this.frame=document.createElement("iframe"),this.frame.name=r||"",this.frame.classList.add.apply(this.frame.classList,o),n.appendChild(this.frame),this.child=this.frame.contentWindow||this.frame.contentDocument.parentWindow,this.model=i||{},this.sendHandshake(a)}return e.prototype.sendHandshake=function(a){var r,s=this,o=function(e){var t=document.createElement("a");t.href=e;var n=4<t.protocol.length?t.protocol:window.location.protocol,i=t.host.length?"80"===t.port||"443"===t.port?t.hostname:t.host:window.location.host;return t.origin||n+"//"+i}(a),d=0;return new e.Promise(function(n,i){s.parent.addEventListener("message",function e(t){return!!l(t,o)&&("handshake-reply"===t.data.postmate?(clearInterval(r),h("Parent: Received handshake reply from Child"),s.parent.removeEventListener("message",e,!1),s.childOrigin=t.origin,h("Parent: Saving Child origin",s.childOrigin),n(new p(s))):(h("Parent: Invalid handshake reply"),i("Failed handshake")))},!1);function e(){h("Parent: Sending handshake attempt "+ ++d,{childOrigin:o}),s.child.postMessage({postmate:"handshake",type:c,model:s.model},o),5===d&&clearInterval(r)}function t(){e(),r=setInterval(e,500)}s.frame.attachEvent?s.frame.attachEvent("onload",t):s.frame.addEventListener("load",t),h("Parent: Loading frame",{url:a}),s.frame.src=a})},e}();return m.debug=!1,m.Promise=function(){try{return window?window.Promise:Promise}catch(e){return null}}(),m.Model=function(){function e(e){return this.child=window,this.model=e,this.parent=this.child.parent,this.sendHandshakeReply()}return e.prototype.sendHandshakeReply=function(){var r=this;return new m.Promise(function(i,a){r.child.addEventListener("message",function e(t){if(t.data.postmate){if("handshake"!==t.data.postmate)return a("Handshake Reply Failed");h("Child: Received handshake from Parent"),r.child.removeEventListener("message",e,!1),h("Child: Sending handshake reply to Parent"),t.source.postMessage({postmate:"handshake-reply",type:c},t.origin),r.parentOrigin=t.origin;var n=t.data.model;return n&&(Object.keys(n).forEach(function(e){r.model[e]=n[e]}),h("Child: Inherited and extended model from Parent")),h("Child: Saving Parent origin",r.parentOrigin),i(new s(r))}},!1)})},e}(),m});
