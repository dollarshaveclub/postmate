/**
  postmate - A powerful, simple, promise-based postMessage library
  @version v1.4.0
  @link https://github.com/dollarshaveclub/postmate
  @author Jacob Kelley <jakie8@gmail.com>
  @license MIT
**/
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.Postmate=t()}(this,function(){"use strict";var e="application/x-postmate-v1+json",t=Object.prototype.hasOwnProperty,n=0,i=function(){var e;return d.debug?(e=console).log.apply(e,arguments):null},a=function(t,n){return t.origin===n&&("object"==typeof t.data&&("postmate"in t.data&&(t.data.type===e&&!!{"handshake-reply":1,call:1,emit:1,reply:1,request:1}[t.data.postmate])))},r=function(e,t){var n="function"==typeof e[t]?e[t]():e[t];return d.Promise.resolve(n)},s=function(){function t(e){var t=this;this.parent=e.parent,this.frame=e.frame,this.child=e.child,this.childOrigin=e.childOrigin,this.events={},i("Parent: Registering API"),i("Parent: Awaiting messages..."),this.listener=function(e){var n=((e||{}).data||{}).value||{},a=n.data,r=n.name;"emit"===e.data.postmate&&(i("Parent: Received event emission: "+r),r in t.events&&t.events[r].call(t,a))},this.parent.addEventListener("message",this.listener,!1),i("Parent: Awaiting event emissions from Child")}var a=t.prototype;return a.get=function(t){var i=this;return new d.Promise(function(a){var r=++n;i.parent.addEventListener("message",function e(t){t.data.uid===r&&"reply"===t.data.postmate&&(i.parent.removeEventListener("message",e,!1),a(t.data.value))},!1),i.child.postMessage({postmate:"request",type:e,property:t,uid:r},i.childOrigin)})},a.call=function(t,n){this.child.postMessage({postmate:"call",type:e,property:t,data:n},this.childOrigin)},a.on=function(e,t){this.events[e]=t},a.destroy=function(){i("Parent: Destroying Postmate instance"),window.removeEventListener("message",this.listener,!1),this.frame.parentNode.removeChild(this.frame)},t}(),o=function(){function t(t){var n=this;this.model=t.model,this.parent=t.parent,this.parentOrigin=t.parentOrigin,this.child=t.child,i("Child: Registering API"),i("Child: Awaiting messages..."),this.child.addEventListener("message",function(t){if(a(t,n.parentOrigin)){i("Child: Received request",t.data);var s=t.data,o=s.property,d=s.uid,h=s.data;"call"!==t.data.postmate?r(n.model,o).then(function(n){return t.source.postMessage({property:o,postmate:"reply",type:e,uid:d,value:n},t.origin)}):o in n.model&&"function"==typeof n.model[o]&&n.model[o].call(n,h)}})}return t.prototype.emit=function(t,n){i('Child: Emitting Event "'+t+'"',n),this.parent.postMessage({postmate:"emit",type:e,value:{name:t,data:n}},this.parentOrigin)},t}(),d=function(){function t(e){var t=void 0===e?userOptions:e,n=t.container,i=void 0===n?void 0!==i?i:document.body:n,a=t.model,r=t.url;return this.parent=window,this.frame=document.createElement("iframe"),i.appendChild(this.frame),this.child=this.frame.contentWindow||this.frame.contentDocument.parentWindow,this.model=a||{},this.sendHandshake(r)}return t.prototype.sendHandshake=function(n){var r,o=this,d=function(e){var t=document.createElement("a");return t.href=e,t.origin||t.protocol+"//"+t.hostname}(n),h=0;return new t.Promise(function(t,l){o.parent.addEventListener("message",function e(n){return!!a(n,d)&&("handshake-reply"===n.data.postmate?(clearInterval(r),i("Parent: Received handshake reply from Child"),o.parent.removeEventListener("message",e,!1),o.childOrigin=n.origin,i("Parent: Saving Child origin",o.childOrigin),t(new s(o))):(i("Parent: Invalid handshake reply"),l("Failed handshake")))},!1);var p=function(){i("Parent: Sending handshake attempt "+ ++h,{childOrigin:d}),o.child.postMessage({postmate:"handshake",type:e,model:o.model},d),5===h&&clearInterval(r)},c=function(){p(),r=setInterval(p,500)};o.frame.attachEvent?o.frame.attachEvent("onload",c):o.frame.onload=c,i("Parent: Loading frame",{url:n}),o.frame.src=n})},t}();return d.debug=!1,d.Promise=function(){try{return window?window.Promise:Promise}catch(e){return null}}(),d.Model=function(){function n(e){return this.child=window,this.model=e,this.parent=this.child.parent,this.sendHandshakeReply()}return n.prototype.sendHandshakeReply=function(){var n=this;return new d.Promise(function(a,r){n.child.addEventListener("message",function s(d){if(d.data.postmate){if("handshake"===d.data.postmate){i("Child: Received handshake from Parent"),n.child.removeEventListener("message",s,!1),i("Child: Sending handshake reply to Parent"),d.source.postMessage({postmate:"handshake-reply",type:e},d.origin),n.parentOrigin=d.origin;var h=d.data.model;if(h){for(var l=Object.keys(h),p=0;p<l.length;p++)t.call(h,l[p])&&(n.model[l[p]]=h[l[p]]);i("Child: Inherited and extended model from Parent")}return i("Child: Saving Parent origin",n.parentOrigin),a(new o(n))}return r("Handshake Reply Failed")}},!1)})},n}(),d});
