/**
  * postmate - A powerful, simple, promise-based postMessage library
  * @version 1.2.0
  * @link https://github.com/dollarshaveclub/postmate
  * @author Jacob Kelley <jakie8@gmail.com>
  * @license MIT */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.Postmate=t()}(this,function(){"use strict";function e(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var t=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i="application/x-postmate-v1+json",a=Object.prototype.hasOwnProperty,r=0,o=function(){return++r},s=function(){var e;return m.debug?(e=console).log.apply(e,arguments):null},d=function(e){var t=document.createElement("a");return t.href=e,t.origin||t.protocol+"//"+t.hostname},l=function(e,t){return e.origin===t&&("object"===n(e.data)&&("postmate"in e.data&&(e.data.type===i&&!!{"handshake-reply":1,call:1,emit:1,reply:1,request:1}[e.data.postmate])))},h=function(e,t){var n="function"==typeof e[t]?e[t]():e[t];return m.Promise.resolve(n)},u=function(){function n(t){var i=this;e(this,n),this.parent=t.parent,this.frame=t.frame,this.child=t.child,this.childOrigin=t.childOrigin,this.events={},s("Parent: Registering API"),s("Parent: Awaiting messages..."),this.listener=function(e){var t=((e||{}).data||{}).value||{},n=t.data,a=t.name;"emit"===e.data.postmate&&(s("Parent: Received event emission: "+a),a in i.events&&i.events[a].call(i,n))},this.parent.addEventListener("message",this.listener,!1),s("Parent: Awaiting event emissions from Child")}return t(n,[{key:"get",value:function(e){var t=this;return new m.Promise(function(n){var a=o(),r=function e(i){i.data.uid===a&&"reply"===i.data.postmate&&(t.parent.removeEventListener("message",e,!1),n(i.data.value))};t.parent.addEventListener("message",r,!1),t.child.postMessage({postmate:"request",type:i,property:e,uid:a},t.childOrigin)})}},{key:"call",value:function(e,t){this.child.postMessage({postmate:"call",type:i,property:e,data:t},this.childOrigin)}},{key:"on",value:function(e,t){this.events[e]=t}},{key:"destroy",value:function(){s("Parent: Destroying Postmate instance"),window.removeEventListener("message",this.listener,!1),this.frame.parentNode.removeChild(this.frame)}}]),n}(),c=function(){function n(t){var a=this;e(this,n),this.model=t.model,this.parent=t.parent,this.parentOrigin=t.parentOrigin,this.child=t.child,s("Child: Registering API"),s("Child: Awaiting messages..."),this.child.addEventListener("message",function(e){if(l(e,a.parentOrigin)){s("Child: Received request",e.data);var t=e.data,n=t.property,r=t.uid,o=t.data;if("call"===e.data.postmate)return void(n in a.model&&"function"==typeof a.model[n]&&a.model[n].call(a,o));h(a.model,n).then(function(t){return e.source.postMessage({property:n,postmate:"reply",type:i,uid:r,value:t},e.origin)})}})}return t(n,[{key:"emit",value:function(e,t){s('Child: Emitting Event "'+e+'"',t),this.parent.postMessage({postmate:"emit",type:i,value:{name:e,data:t}},this.parentOrigin)}}]),n}(),m=function(){function n(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:userOptions,i=t.container,a=void 0===i?void 0!==a?a:document.body:i,r=t.model,o=t.url;return e(this,n),this.parent=window,this.frame=document.createElement("iframe"),a.appendChild(this.frame),this.child=this.frame.contentWindow||this.frame.contentDocument.parentWindow,this.model=r||{},this.sendHandshake(o)}return t(n,[{key:"sendHandshake",value:function(e){var t=this,a=d(e),r=0,o=void 0;return new n.Promise(function(n,d){var h=function e(i){return!!l(i,a)&&("handshake-reply"===i.data.postmate?(clearInterval(o),s("Parent: Received handshake reply from Child"),t.parent.removeEventListener("message",e,!1),t.childOrigin=i.origin,s("Parent: Saving Child origin",t.childOrigin),n(new u(t))):(s("Parent: Invalid handshake reply"),d("Failed handshake")))};t.parent.addEventListener("message",h,!1);var c=function(){r++,s("Parent: Sending handshake attempt "+r,{childOrigin:a}),t.child.postMessage({postmate:"handshake",type:i,model:t.model},a),5===r&&clearInterval(o)},m=function(){c(),o=setInterval(c,500)};t.frame.attachEvent?t.frame.attachEvent("onload",m):t.frame.onload=m,s("Parent: Loading frame",{url:e}),t.frame.src=e})}}]),n}();return m.debug=!1,m.Promise=function(){try{return window?window.Promise:Promise}catch(e){return null}}(),m.Model=function(){function n(t){return e(this,n),this.child=window,this.model=t,this.parent=this.child.parent,this.sendHandshakeReply()}return t(n,[{key:"sendHandshakeReply",value:function(){var e=this;return new m.Promise(function(t,n){var r=function r(o){if(o.data.postmate){if("handshake"===o.data.postmate){s("Child: Received handshake from Parent"),e.child.removeEventListener("message",r,!1),s("Child: Sending handshake reply to Parent"),o.source.postMessage({postmate:"handshake-reply",type:i},o.origin),e.parentOrigin=o.origin;var d=o.data.model;if(d){for(var l=Object.keys(d),h=0;h<l.length;h++)a.call(d,l[h])&&(e.model[l[h]]=d[l[h]]);s("Child: Inherited and extended model from Parent")}return s("Child: Saving Parent origin",e.parentOrigin),t(new c(e))}return n("Handshake Reply Failed")}};e.child.addEventListener("message",r,!1)})}}]),n}(),m});
